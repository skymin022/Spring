aop
## Spring AOP 개념 및 목적
- **AOP(Aspect-Oriented Programming, 관점 지향 프로그래밍)**는 핵심 비즈니스 로직과 별개인 횡단 관심사를 분리하여 프로그래밍하는 기법이다. 이를 통해 코드 중복을 줄이고 유지보수성을 향상시킨다.     
- 스프링 AOP는 핵심 로직과 횡단 관심사(예: 로그 처리, 예외 처리)를 분리하여 어플리케이션 동작 추적 및 모니터링을 가능하게 한다.   

## AOP 주요 용어
| 용어           | 정의                                                         |
|----------------|--------------------------------------------------------------|
| 어드바이스(Advice) | 횡단 관심사를 구현한 메소드                                     |
| 에스펙트(Aspect)   | 여러 어드바이스와 포인트컷을 모아놓은 클래스                   |
| 조인포인트(Join Point) | 어드바이스가 적용되는 시점 (메서드 실행 타이밍 등)             |
| 포인트컷(Pointcut)  | 어드바이스가 적용될 조건을 지정하는 표현식                     |
| 타겟(Target)       | 어드바이스가 적용되는 대상 클래스                              |
| 프록시(Proxy)       | 스프링 AOP가 리플렉션과 함께 관점 지향 프로그래밍을 구현하기 위해 사용하는 객체 |

    

## 스프링 AOP 설정 및 적용 절차
- Maven `pom.xml`에 스프링 AOP, AspectJRT, AspectJ Weaver 의존성을 추가해야 사용 가능하다.    
- Aspect 클래스를 정의하고 `@Aspect`, `@Component`, `@EnableAspectJAutoProxy` 어노테이션을 사용해 빈으로 등록 및 AOP 활성화 한다.    
- 컴파일러 플러그인 설정에서 `-parameters` 옵션을 지정해야 파라미터 이름을 정상적으로 추적할 수 있다.   

## 핵심 로직과 횡단 관심사의 분리
- 기존 핵심 로직(비즈니스 로직) 내에 분산되어 있던 로그 등 횡단 관심사를 Aspect와 Advice로 분리하여 코드 중복 제거 및 모듈화가 가능하다.    
- 프로젝트 구조는 DTO, Service, DAO 등 핵심 로직 패키지와 별도로 AOP 관련 로깅 Aspect 패키지를 분리하여 관리한다.     

## Advice 유형 및 작동 원리
| Advice 유형       | 설명                                                                                      | 동작 시점                                 |
|------------------|-----------------------------------------------------------------------------------------|------------------------------------------|
| Before           | 타겟 메서드 실행 전에 동작하는 Advice                                                    | 타겟 메서드 실행 직전                     |
| After            | 타겟 메서드 실행 후에 동작하는 Advice                                                    | 타겟 메서드 실행 직후                     |
| Around           | 타겟 메서드 실행 전후 모두 제어 가능하며, 직접 타겟 메서드 실행을 호출하고 결과를 반환받음 | 타겟 메서드 실행 전과 후 모두             |
| After Returning  | 타겟 메서드가 정상적으로 반환된 후 동작하며 반환값을 참조할 수 있음                      | 타겟 메서드 반환 후                       |
| After Throwing   | 타겟 메서드 실행 중 예외가 발생했을 때 동작하며 예외 객체를 참조할 수 있음               | 예외 발생 후                             |

- 포인트컷 표현식은 보통 `execution()` 지시자를 사용하며, 접근제어자, 반환타입, 패키지, 클래스, 메서드, 매개변수 조건까지 지정할 수 있다.        

## 포인트컷 표현식 예시 및 해석
- `execution(public * com.ralo.spring.service.BoardServiceImpl.*(..))`  
  → `com.ralo.spring.service` 패키지 내 `BoardServiceImpl` 클래스의 모든 public 메서드 실행 시점에 Advice 적용
- 와일드카드 `*`는 반환타입, 클래스명, 메서드명 등에서 모든 값을 의미하며, `(..)`는 매개변수가 어떤 것이든 상관없음을 뜻한다.     

## Advice 구현과 활용 예제
- 조인포인트 객체를 통해 타겟 메서드 시그니처, 파라미터 이름과 값을 출력하는 기능을 구현할 수 있다.     
- Before Advice: 타겟 메서드 실행 전에 파라미터 출력 등 사전 작업 수행  
- After Advice: 타겟 메서드 실행 후 결과 처리 및 로그 출력  
- Around Advice: 타겟 메서드 실행 전후를 제어하며, 프로시딩 메서드 호출로 타겟 실행, 반환값 및 예외 처리 가능  
- After Returning Advice: 반환값을 받아서 추가 로직 수행 가능  
- After Throwing Advice: 예외 발생 시 예외 정보를 받아 처리할 수 있어 예외 처리 코드 중복 제거 가능                

## Around Advice 상세 동작 과정
- Around Advice는 타겟 메서드 실행을 직접 제어하며, 실행 전후에 추가 작업 가능  
- `proceed()` 메서드 호출 시 타겟 메서드가 실행되고, 반환값을 받아 후처리 수행  
- Around Advice 내에서 별도로 After Advice를 호출할 수도 있음  
- 수행 시간 측정 등 실행 전후 작업에 유용하게 활용 가능하다.          

## AOP 적용 시 주의사항 및 문제해결
- 파라미터 이름이 출력되지 않는 문제는 컴파일러 옵션 `-parameters` 미설정 또는 Maven 프로젝트 빌드 상태 문제일 수 있다. Maven Clean 및 Install, 프로젝트 클린, Maven 업데이트를 통해 해결 가능하다.     
- Lombok 사용 시 IDE에서 인식이 안 될 경우 별도 설치 및 재시작 필요하다.     
- 서버 재시작 및 클린 빌드로 코드 변경 사항이 정상 반영되는지 확인해야 한다.     

## AOP 적용의 실무적 의의
> **💡 Key Insight:** AOP를 활용하면 핵심 로직에 중복되게 삽입되던 로그 출력, 예외 처리, 파라미터 체크 등 횡단 관심사를 한 곳에서 집중 관리할 수 있어 코드 유지보수가 훨씬 용이해진다. 파라미터 값 추적, 수행 시간 측정, 예외 처리 등 반복적인 작업의 중복을 제거하여 개발 효율성을 크게 향상시킨다.   

---

> **❗ Important:** AOP에서 어드바이스 종류별 동작 시점과 역할을 명확히 이해하는 것이 중요하다. 특히 Around Advice는 타겟 메서드 실행 제어 및 반환값 처리, 예외 처리까지 가능하므로 복잡한 로직 제어에 적합하다. After Returning과 After Throwing은 각각 정상 반환과 예외 발생 후 후처리를 담당해 분리된 관심사를 명확히 분리한다.     

---

## 요약: AOP 구성 및 실행 흐름
1. 의존성 추가 → 2. Aspect 클래스 정의 및 빈 등록 → 3. 포인트컷 및 어드바이스 작성 → 4. 핵심 로직 구현 → 5. AOP 활성화 및 테스트  
6. Before, After, Around, After Returning, After Throwing 어드바이스를 활용해 로그, 예외, 성능 측정 등 횡단 관심사 구현  
7. Maven 빌드 및 IDE 설정 주의사항 확인 후 서버 재시작으로 동작 확인  
8. 핵심 로직과 횡단 관심사 분리로 코드 중복 제거 및 유지보수성 향상 

di 1
## Spring 의존성 주입(DI)의 기본 개념 및 필요성
- **의존성 주입(DI)**은 하나의 객체가 다른 객체를 사용할 때, 그 의존성을 외부에서 생성하여 주입하는 개념이다. 스프링 프레임워크가 이 과정을 관리하여 개발자가 직접 객체 생성과 주입을 하지 않아도 된다   .
- 스프링 DI의 핵심 작업은 ①빈(Bean) 등록과 ②의존성 자동 주입 두 가지로 요약할 수 있다. 빈 등록 후 스프링 IOC 컨테이너가 객체 생명주기를 관리하며, 필요한 곳에 자동으로 의존성을 주입한다   .

## 스프링에서 빈 등록 방법 세 가지
| 방법 | 특징 및 설명 |
|-------|-------------|
| 1. XML 설정 | 과거 방식으로 루트컨텍스트 XML 파일에 `` 태그로 빈을 등록. 유지보수가 어렵고 비효율적임   . |
| 2. 어노테이션 기반 | 클래스에 `@Component`, `@Service`, `@Repository`, `@Controller` 등 역할별 어노테이션을 붙여 빈으로 등록. 컴포넌트 스캔을 통해 자동 등록 가능     . |
| 3. 자바 설정 파일 | `@Configuration` 어노테이션을 붙인 설정 클래스 내에 `@Bean`이 붙은 메서드를 통해 빈을 생성 및 등록. 여러 빈을 한 곳에서 관리 가능     . |

- 어노테이션 방식에서 `@Component`는 기본적인 빈 등록 어노테이션이며, 역할에 따른 의미를 부여하려면 `@Service`(비즈니스 로직), `@Repository`(데이터 액세스), `@Controller`(MVC 컨트롤러) 어노테이션을 사용한다. 이들은 모두 `@Component`의 특수화된 형태로 결과적으로 빈 등록이 된다     .
- 컴포넌트 스캔을 활성화하려면 XML 설정에 ``을 추가해 해당 패키지 내 어노테이션이 붙은 클래스를 탐색하여 빈으로 등록한다   .

## 의존성 자동 주입(Autowired) 방식
- 의존성 자동 주입은 주로 `@Autowired` 어노테이션을 사용하며, IOC 컨테이너에 등록된 빈을 자동으로 주입한다. `@Autowired`는 필드, 생성자, 메서드(세터)에 붙일 수 있다      .
- **생성자 주입**은 생성자 매개변수에 `@Autowired`를 붙여 주입하며, 순환 의존성 문제를 방지하고 필수 의존성을 강제할 수 있어 권장된다. 반면 필드 주입은 간단하지만 순환 의존성 문제를 발견하기 어렵다     .
- `@Autowired`는 기본적으로 타입 기반 주입이며, 동일 타입 빈이 여러 개일 경우 `@Qualifier("빈이름")` 어노테이션을 사용하여 특정 빈을 지정할 수 있다. 예를 들어, 두 개의 `PostService` 구현체 중 하나를 명확히 선택 가능하다      .
- `required` 옵션을 사용해 필수 주입 여부를 조정할 수 있지만, 대부분 필수 주입이 기본값이다. `false` 설정 시 빈이 없으면 `null`이 주입되어 예외를 방지할 수 있다   .

## `@Resource` 어노테이션과 비교
- `@Resource`는 자바 표준(`javax.annotation`) 기반 의존성 주입 어노테이션으로, 주로 이름(빈 이름) 기준 주입에 쓰이며 필드와 메서드에만 적용 가능하고 생성자 주입은 지원하지 않는다. 스프링에서는 `@Autowired`를 권장한다       .

## 스프링 IOC 컨테이너와 빈 관리
- 스프링은 `BeanFactory` 인터페이스와 이를 구현한 다양한 ApplicationContext(`AnnotationConfigApplicationContext`, `ClassPathXmlApplicationContext` 등)를 통해 빈 생성, 구성, 관리, 초기화, 국제화 등을 담당한다    .
- 개발자는 어노테이션 기반 자동 주입을 주로 사용하지만, 필요 시 ApplicationContext를 직접 생성하여 빈을 수동으로 가져올 수도 있다. 예를 들어, 컴포넌트 스캔 패키지명을 지정하거나 설정 클래스, XML 설정 파일을 통해 빈을 조회 가능하다        .

## 실습 예제 및 프로젝트 구성
- 기본적으로 DTO, DAO, Service, Controller 패키지를 구성하여 각각 역할에 맞는 클래스를 만든다. DTO는 데이터 전달 객체, DAO는 DB 접근, Service는 비즈니스 로직, Controller는 MVC에서 요청 처리 역할을 한다       .
- XML 방식 빈 등록 시 루트컨텍스트 XML에서 `` 태그로 DAO, Service 빈을 정의하고, Service 빈은 생성자 주입 방식으로 DAO 빈을 주입받도록 설정한다. Controller에서는 `@Autowired`로 Service 빈을 주입받아 사용한다. 서버 실행 시 XML 빈 정의 리더가 이를 읽어 등록하고 자동 주입을 수행한다         .
- 어노테이션 방식으로 전환 시, DAO에 `@Repository`, Service에 `@Service`, Controller에 `@Controller`를 붙이고, XML 빈 등록을 삭제한다. Service 빈은 필드 주입으로 DAO 빈을 주입받으며, Controller도 필드 주입을 사용한다. 동일한 기능이 더 간결한 코드로 구현된다      .
- 자바 설정 방식은 `@Configuration`이 붙은 설정 클래스 내에 `@Bean` 메서드로 빈을 등록한다. 여러 빈을 한 곳에서 관리할 수 있고, 이 방식은 CG 라이브러리(AspectJ 기반 라이브러리) 의존성을 추가해야 한다. 메이븐 의존성 추가 후 서버 실행 가능하다    .

## 스프링 MVC와 연계한 간단한 설명
- `@Controller` 어노테이션을 붙인 클래스를 컨트롤러 역할로 빈 등록하며, 요청 경로 매핑은 `@RequestMapping`으로 처리한다. 모델 객체를 사용해 뷰에 데이터를 전달하고, 뷰 리졸버가 JSP 경로와 확장자를 관리하여 뷰 이름만 지정하면 화면 출력이 가능하다            .

---

> **❗ Important:** 스프링 DI의 핵심은 "빈을 등록하고, 의존성 자동 주입을 받는 것" 두 가지이며, 이를 통해 개발자는 직접 객체 생성을 관리하지 않고도 객체 간 의존성을 효과적으로 관리할 수 있다.
    

> **❗ Important:** 생성자 주입 방식은 순환 의존성과 필수 의존성 문제를 방지할 수 있어 권장되지만, 필드 주입보다 복잡해 보일 수 있다. 상황에 맞게 선택하되, 순환 참조 문제를 인지하는 것이 중요하다.
    

> **❗ Important:** 동일 타입 빈이 여러 개일 경우 `@Qualifier`로 빈 이름을 명시해야 에러 없이 명확히 의존성 주입이 가능하다.
   

> **ℹ️ Note:** `@Resource`는 자바 표준 어노테이션으로 이름 기반 주입에 쓰이며, 스프링 전용 `@Autowired`의 타입 기반 주입과 차이가 있다. 스프링 프로젝트에서는 주로 `@Autowired`를 사용하는 것이 실용적이다.
   

> **ℹ️ Note:** XML 설정 방식은 과거 방식으로 유지보수가 어렵고 비효율적이므로, 현재는 어노테이션 기반 또는 자바 설정 파일 기반 빈 등록 방식을 권장한다.
   

---

```java
// 생성자 주입 예시
@Service
public class BoardServiceImpl implements BoardService {
    private final BoardDAO boardDAO;

    @Autowired
    public BoardServiceImpl(BoardDAO boardDAO) {
        this.boardDAO = boardDAO;
    }
    // 비즈니스 로직 구현
}
```

```java
// 필드 주입 예시
@Service
public class BoardServiceImpl implements BoardService {
    @Autowired
    private BoardDAO boardDAO;
    // 비즈니스 로직 구현
}
```
    

---

| 어노테이션 | 역할 및 특징                         |
|------------|-----------------------------------|
| @Component | 기본 빈 등록 어노테이션            |
| @Service   | 비즈니스 로직 빈 등록              |
| @Repository| 데이터 액세스 빈 등록              |
| @Controller| MVC 컨트롤러 빈 등록              |
| @Autowired | 의존성 자동 주입 (타입 기반)       |
| @Qualifier | 동일 타입 빈 중 특정 빈 지정       |
| @Resource  | 자바 표준 의존성 주입 (이름 기반)  |
| @Configuration | 자바 설정 클래스 지정          |
| @Bean      | 설정 클래스 내 빈 생성 메서드 지정 |

          

---

## 요약
- 스프링 DI는 객체 간 의존성을 스프링에 맡겨 개발 편의성과 유지보수성을 높인다.
- 빈 등록은 XML, 어노테이션, 자바 설정 파일 세 가지 방법이 있으며, 어노테이션과 자바 설정 방식이 현대적이고 권장된다.
- 의존성 자동 주입은 `@Autowired`가 기본이며, 생성자 주입이 권장된다.
- 동일 타입 빈 중 특정 빈을 주입할 때는 `@Qualifier`를 사용한다.
- 스프링 MVC와 연계하여 컨트롤러에 빈을 주입하고, 모델을 통해 뷰에 데이터를 전달한다.
- 빈 관리 및 의존성 주입은 스프링 IOC 컨테이너가 담당하며, 개발자는 설정과 어노테이션만 신경 쓰면 된다          .

di2
## 의존성 주입을 위한 @Qualifier 주석

- **@Qualifier** 주석은 동일한 유형의 여러 빈이 존재할 때 특정 빈을 이름으로 지정하여 정확한 의존성 주입을 가능하게 합니다   .
- 예를 들어, `PostService` 인터페이스의 여러 구현체(예: `BoardServiceImpl`, `CommentServiceImpl`)가 있을 경우, 각각 `@Service("boardService")` 또는 `@Service("commentService")`와 같은 주석을 사용하여 고유한 이름으로 빈으로 등록할 수 있습니다   .
- 의존성을 주입할 때, `@Qualifier("boardService")`는 `"boardService"`라는 이름의 빈을 주입하도록 보장하여 동일한 유형의 여러 빈이 있을 경우의 모호성을 해결합니다   .

## 프로젝트 설정 및 빈 등록

- 새로운 Spring Legacy Project는 Spring MVC와 함께 생성할 수 있으며, 기존 XML 구성 파일(예: `pom.xml`)을 복사하고 수정하여 구성할 수 있습니다    .
- 기본 프로젝트 설정에는 JDK 및 서버(예: JDK 11, Apache Tomcat)를 설정하여 호환성을 보장하는 것이 포함됩니다  .
- 서비스, DAO 및 DTO 계층을 위한 패키지를 구조화하여 애플리케이션을 논리적으로 조직합니다   .
- 인터페이스와 여러 구현 클래스(예: `MyService`, `AServiceImpl`, `BServiceImpl`, `CServiceImpl`)를 정의하고 `@Service`로 주석을 달아 Spring 빈으로 등록합니다      .
- 빈 이름은 명시적으로 지정하지 않으면 클래스 이름으로 기본 설정되며, 그렇지 않으면 주석 괄호 안에 사용자 정의 이름을 제공할 수 있습니다. 예: `@Service("cService")`   .

## 의존성 주입 및 모호성 처리

- 동일한 인터페이스를 구현하는 여러 빈이 있을 경우, Spring은 어떤 빈을 주입할지 결정할 수 없으며, 이로 인해 `NoUniqueBeanDefinitionException`(해당 유형의 적합한 빈을 찾을 수 없음) 오류가 발생합니다    .
- 이 모호성은 `@Qualifier`를 사용하여 주입할 빈을 이름으로 명시적으로 지정함으로써 해결됩니다    .
- 인터페이스 유형의 빈이 하나만 존재하는 경우, Spring은 `@Qualifier` 없이 자동으로 주입합니다   .

## @Autowired 및 required 속성

- `@Autowired` 주석은 유형에 따라 자동 주입을 수행하지만, 일치하는 빈이 없거나 자격이 없는 여러 후보가 존재할 경우 오류를 발생시킬 수 있습니다   .
- `@Autowired`의 `required` 속성(기본값은 `true`)을 `false`로 설정하면 빈이 없을 때 오류를 피할 수 있으며, 대신 의존성이 `null`로 주입될 수 있습니다    .
- 이 기능은 선택적 의존성에 유용하며, 빈이 누락될 때 애플리케이션 시작 실패를 방지하는 데 도움이 됩니다   .

## 빈 등록 주석 및 역할

| 주석               | 역할/용도                                   |
|--------------------|----------------------------------------------|
| `@Component`       | 일반 빈 등록                                |
| `@Service`         | 서비스 계층 빈 등록                        |
| `@Repository`      | DAO 계층 빈 등록, 데이터 접근 역할        |
| `@Controller`      | 프레젠테이션 계층 빈 등록                  |

- 이러한 모든 주석은 클래스를 Spring IoC 컨테이너의 빈으로 등록하여 의존성 주입을 가능하게 합니다   .
- 빈은 명시적으로 주석을 달아야 등록되며, 상속만으로는 서브클래스가 빈으로 등록되지 않습니다  .

## 의존성 주입 방법

- Spring은 여러 의존성 주입 방법을 지원합니다:
  - **필드 주입**: 필드에 `@Autowired` 사용
  - **생성자 주입**: 생성자에 주석 달기
  - **세터 주입**: 세터 메서드에 주석 달기
- 이러한 모든 방법은 Spring이 IoC 컨테이너에서 등록된 빈을 자동으로 주입할 수 있게 합니다    .

## 실용적인 예제 요약

- 동일한 인터페이스(`MyService`와 `AServiceImpl`, `BServiceImpl`, `CServiceImpl`)의 여러 구현을 정의하여 모호성과 `@Qualifier`를 통한 해결을 보여주었습니다     .
- `@Repository`로 주석이 달린 DAO(`BoardDAO`, `CommentDAO`)와 데이터 처리를 위한 `@Component`로 등록된 DTO를 생성했습니다      .
- 인터페이스에 대한 구현이 하나만 존재할 때(예: `BoardServiceImpl`이 `BoardService`를 구현) 주입에 `@Qualifier`가 필요하지 않음을 보여주었습니다   .
- 빈이 존재하지 않을 때 null 주입을 허용하기 위해 `@Autowired(required = false)`를 사용하여 선택적 주입을 시연하였으며, 런타임 오류를 피했습니다     .
- 서비스 빈(`BoardServiceImpl`)이 생성자 또는 세터 주입을 통해 DAO 빈(`BoardDAO`)을 수신하는 주입 흐름을 설명하여 Spring DI를 통한 계층 간의 연결을 보여주었습니다   .

> **❗ 중요:** 동일한 유형의 여러 빈이 존재할 때 자격을 지정하지 않으면 Spring은 모호성으로 인해 오류를 발생시킵니다. 빈 이름과 함께 `@Qualifier`를 사용하는 것이 필수적이며, 이를 통해 정확한 의존성 주입을 가능하게 합니다. 인터페이스를 구현하는 빈이 하나만 존재할 경우 `@Qualifier`는 선택 사항입니다    .

> **ℹ️ 참고:** `@Autowired`의 `required` 속성은 일치하는 빈이 없을 경우 주입을 우아하게 건너뛰도록 하여 선택적 의존성을 관리하는 데 도움이 되며, 애플리케이션 시작 오류를 방지합니다   .

        

